#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt {
    quick-tap-ms = <150>;
    tapping-term-ms = <2000>;
    flavor = "tap-preferred";
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        screenshot {
            bindings = <&lt 0 LG(LS(NUMBER_4))>;
            key-positions = <2 3>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <25 28>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <27 26>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
        };

        paste {
            bindings = <&kp LG(B)>;
            key-positions = <27 28>;
        };

        select_all {
            bindings = <&kp LG(A)>;
            key-positions = <25 29>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <13 16>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <14 15>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <25 27>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <28 26>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <3 4>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <4 3 2>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <9 10>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <21 22>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <34 33>;
        };

        e {
            bindings = <&kp KP_N7>;
            key-positions = <13 14>;
        };

        x {
            bindings = <&kp KP_N5>;
            key-positions = <16 15>;
        };

        t {
            bindings = <&kp KP_N6>;
            key-positions = <16 15 14>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <4 15>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 16>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <3 28>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <27 16>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <15 28>;
        };

        atsign {
            bindings = <&kp AT_SIGN>;
            key-positions = <27 4>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <1 4>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <3 14>;
        };

        left-parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <8 7>;
        };

        right-parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <9 8>;
        };

        left-bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <19 20>;
        };

        right-bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 20>;
        };

        left-brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 32>;
        };

        right-brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <33 32>;
        };

        double_quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <10 8>;
        };

        single_qoute {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <20 22>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <32 34>;
        };

        less {
            bindings = <&kp LESS_THAN>;
            key-positions = <8 19>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <19 32>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <6 7>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <30 31>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <19 32>;
        };

        double_quotes_n {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <8 21>;
        };

        single_qoute_n {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <20 33>;
        };

        grave_n {
            bindings = <&kp GRAVE>;
            key-positions = <9 20>;
        };

        backslash_n {
            bindings = <&kp BACKSLASH>;
            key-positions = <7 20>;
        };

        slash_n {
            bindings = <&kp SLASH>;
            key-positions = <31 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q       &kp W        &kp E       &kp R            &kp T           &kp Y              &kp U                &kp I       &kp O        &kp KP_N1       &none
&none  &mt LALT A  &mt LCTRL S  &mt LGUI D  &mt LSHFT F      &kp G           &kp H              &mt RSHFT J          &mt RGUI K  &mt RCTRL L  &mt RALT KP_N2  &none
&none  &kp Z       &kp X        &kp C       &kp V            &kp B           &kp N              &kp M                &kp KP_N3   &kp KP_N4    &kp COMMA       &none
                                &lt 2 TAB   &mt LSHFT SPACE  &lt 1 QUESTION  &lt 1 EXCLAMATION  &mt RSHFT BACKSPACE  &lt 2 DOT
            >;
        };

        lower_layer {
            bindings = <
&none  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9   &kp NUMBER_0  &kp PLUS       &msc SCRL_UP    &msc SCRL_DOWN  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES  &none
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4   &kp NUMBER_5  &kp EQUAL      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP           &mmv MOVE_RIGHT    &none
&none  &kp TILDE     &kp PERCENT   &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LESS_THAN  &mkp MB1        &mkp MB2        &mkp MB3               &kp GRAVE          &none
                                   &trans        &trans         &trans        &trans         &trans          &trans
            >;
        };

        raise_layer {
            bindings = <
&mt LGUI KP_NUM  &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp DOWN  &kp RIGHT  &kp PSCRN   &kp C_VOLUME_UP    &kp C_BRIGHTNESS_INC  &kp CLCK
&mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp KP_N5  &kp KP_N6  &kp KP_N7  &kp KP_PLUS   &kp HOME  &kp PG_DN  &kp PG_UP   &kp END            &kp INS               &mt RCTRL K_APP
&kp LALT         &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp UP    &kp LEFT   &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_BRIGHTNESS_DEC  &kp RALT
                                             &trans     &trans     &trans        &trans    &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans        &none         &trans        &trans
            >;
        };
    };
};
