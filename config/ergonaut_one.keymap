#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt {
    quick-tap-ms = <150>;
    tapping-term-ms = <250>;
    flavor = "tap-preferred";
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        screenshot {
            bindings = <&lt 0 LG(LS(NUMBER_4))>;
            key-positions = <2 3>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <25 28>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <27 26>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
        };

        paste {
            bindings = <&kp LG(B)>;
            key-positions = <27 28>;
        };

        select_all {
            bindings = <&kp LG(A)>;
            key-positions = <25 29>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <13 16>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <14 15>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <25 27>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <28 26>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <3 4>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <4 3 2>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <21 22>;
        };

        e {
            bindings = <&kp KP_N7>;
            key-positions = <13 14>;
        };

        x {
            bindings = <&kp KP_N5>;
            key-positions = <16 15>;
        };

        t {
            bindings = <&kp KP_N6>;
            key-positions = <16 15 14>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <4 15>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 16>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <3 28>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <27 16>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <15 28>;
        };

        atsign {
            bindings = <&kp AT_SIGN>;
            key-positions = <27 4>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <1 4>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <3 14>;
        };

        left-parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <8 7>;
        };

        right-parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <9 8>;
        };

        left-bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <19 20>;
        };

        right-bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 20>;
        };

        left-brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 32>;
        };

        right-brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <33 32>;
        };

        double_quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <10 8>;
        };

        single_qoute {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <20 22>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <32 34>;
        };

        less {
            bindings = <&kp LESS_THAN>;
            key-positions = <8 19>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <19 32>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <6 7>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <30 31>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <19 31>;
        };

        double_quotes_n {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <8 21>;
        };

        single_qoute_n {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <20 33>;
        };

        grave_n {
            bindings = <&kp GRAVE>;
            key-positions = <9 20>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <20 7>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <31 20>;
        };

        slash_n {
            bindings = <&kp SLASH>;
            key-positions = <33 34>;
        };

        backslash_n {
            bindings = <&kp BACKSLASH>;
            key-positions = <9 10>;
        };

        caret_n {
            bindings = <&kp CARET>;
            key-positions = <1 2>;
        };
    };

    behaviors {
        tap_tap_a: tap_tap_a {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_A";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp LS(A)>;
        };

        tap_dance_a: tap_dance_a {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_DANCE_A";
            bindings = <&kp>, <&tap_tap_a>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
        };

        tap_tap_b: tap_tap_b {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_B";
            #binding-cells = <0>;
            bindings = <&kp B>, <&kp LS(B)>;
        };

        tap_tap_c: tap_tap_c {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_C";
            #binding-cells = <0>;
            bindings = <&kp C>, <&kp LS(C)>;
        };

        tap_tap_d: tap_tap_d {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_D";
            #binding-cells = <0>;
            bindings = <&kp D>, <&kp LS(D)>;
        };

        tap_tap_e: tap_tap_e {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_E";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp LS(E)>;
        };

        tap_tap_f: tap_tap_f {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_F";
            #binding-cells = <0>;
            bindings = <&kp F>, <&kp LS(F)>;
        };

        tap_tap_g: tap_tap_g {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_G";
            #binding-cells = <0>;
            bindings = <&kp G>, <&kp LS(G)>;
        };

        tap_tap_h: tap_tap_h {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_H";
            #binding-cells = <0>;
            bindings = <&kp H>, <&kp LS(H)>;
        };

        tap_tap_i: tap_tap_i {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_I";
            #binding-cells = <0>;
            bindings = <&kp I>, <&kp LS(I)>;
        };

        tap_tap_j: tap_tap_j {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_J";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp LS(J)>;
        };

        tap_tap_k: tap_tap_k {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_K";
            #binding-cells = <0>;
            bindings = <&kp K>, <&kp LS(K)>;
        };

        tap_tap_l: tap_tap_l {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_L";
            #binding-cells = <0>;
            bindings = <&kp L>, <&kp LS(L)>;
        };

        tap_tap_m: tap_tap_m {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_M";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp LS(M)>;
        };

        tap_tap_n: tap_tap_n {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_N";
            #binding-cells = <0>;
            bindings = <&kp N>, <&kp LS(N)>;
        };

        tap_tap_o: tap_tap_o {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_O";
            #binding-cells = <0>;
            bindings = <&kp O>, <&kp LS(O)>;
        };

        tap_tap_p: tap_tap_p {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_P";
            #binding-cells = <0>;
            bindings = <&kp P>, <&kp LS(P)>;
        };

        tap_tap_q: tap_tap_q {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_Q";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp LS(Q)>;
        };

        tap_tap_r: tap_tap_r {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_R";
            #binding-cells = <0>;
            bindings = <&kp R>, <&kp LS(R)>;
        };

        tap_tap_s: tap_tap_s {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_S";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp LS(S)>;
        };

        tap_tap_t: tap_tap_t {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_T";
            #binding-cells = <0>;
            bindings = <&kp T>, <&kp LS(T)>;
        };

        tap_tap_u: tap_tap_u {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_U";
            #binding-cells = <0>;
            bindings = <&kp U>, <&kp LS(U)>;
        };

        tap_tap_v: tap_tap_v {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_V";
            #binding-cells = <0>;
            bindings = <&kp V>, <&kp LS(V)>;
        };

        tap_tap_w: tap_tap_w {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_W";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp LS(W)>;
        };

        tap_tap_x: tap_tap_x {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_X";
            #binding-cells = <0>;
            bindings = <&kp X>, <&kp LS(X)>;
        };

        tap_tap_y: tap_tap_y {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_Y";
            #binding-cells = <0>;
            bindings = <&kp Y>, <&kp LS(Y)>;
        };

        tap_tap_z: tap_tap_z {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_Z";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp LS(Z)>;
        };

        tap_dance_s: tap_dance_s {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_DANCE_S";
            bindings = <&kp>, <&tap_tap_s>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        tap_dance_d: tap_dance_d {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_DANCE_D";
            bindings = <&kp>, <&tap_tap_d>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        tap_dance_f: tap_dance_f {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_DANCE_F";
            bindings = <&kp>, <&tap_tap_f>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        tap_dance_j: tap_dance_j {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_DANCE_J";
            bindings = <&kp>, <&tap_tap_j>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        tap_dance_k: tap_dance_k {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_DANCE_K";
            bindings = <&kp>, <&tap_tap_k>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        tap_dance_l: tap_dance_l {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_DANCE_L";
            bindings = <&kp>, <&tap_tap_l>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        tap_tap_k2: tap_tap_k2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_K2";
            #binding-cells = <0>;
            bindings = <&kp KP_N2>, <&kp LS(KP_N2)>;
        };

        tap_dance_k2: tap_dance_k2 {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_DANCE_K2";
            bindings = <&kp>, <&tap_tap_k2>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        tap_tap_k1: tap_tap_k1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_K1";
            #binding-cells = <0>;
            bindings = <&kp KP_N1>, <&kp LS(KP_N1)>;
        };

        tap_tap_k3: tap_tap_k3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_K3";
            #binding-cells = <0>;
            bindings = <&kp KP_N3>, <&kp LS(KP_N3)>;
        };

        tap_tap_k4: tap_tap_k4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_K4";
            #binding-cells = <0>;
            bindings = <&kp KP_N4>, <&kp LS(KP_N4)>;
        };

        tap_tap_comma: tap_tap_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_COMMA";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp DOT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q       &kp W        &kp E       &kp R            &kp T           &kp Y              &kp U                &kp I       &kp O        &kp KP_N1       &none
&none  &mt LALT A  &mt LCTRL S  &mt LGUI D  &mt LSHFT F      &kp G           &kp H              &mt RSHFT J          &mt RGUI K  &mt RCTRL L  &mt RALT KP_N2  &none
&none  &kp Z       &kp X        &kp C       &kp V            &kp B           &kp N              &kp M                &kp KP_N3   &kp KP_N4    &tap_tap_comma  &none
                                &lt 2 TAB   &mt LSHFT SPACE  &lt 1 QUESTION  &lt 1 EXCLAMATION  &mt RSHFT BACKSPACE  &lt 2 DOT
            >;
        };

        lower_layer {
            bindings = <
&none  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9   &kp NUMBER_0  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none     &none     &none     &none
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4   &kp NUMBER_5  &msc SCRL_UP    &msc SCRL_DOWN   &mkp MB1  &mkp MB2  &mkp MB3  &none
&none  &kp TILDE     &kp PERCENT   &kp CARET     &kp AMPERSAND  &kp ASTERISK  &mmv MOVE_UP    &mmv MOVE_LEFT   &none     &none     &none     &none
                                   &trans        &trans         &trans        &trans          &trans           &trans
            >;
        };

        raise_layer {
            bindings = <
&none  &kp KP_SLASH     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp DOWN  &kp RIGHT  &kp PSCRN   &kp C_VOLUME_UP    &kp C_BRIGHTNESS_INC  &none
&none  &kp KP_MULTIPLY  &kp KP_N5  &kp KP_N6  &kp KP_N7  &kp KP_PLUS   &kp HOME  &kp PG_DN  &kp PG_UP   &kp END            &kp INS               &none
&none  &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp UP    &kp LEFT   &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_BRIGHTNESS_DEC  &none
                                   &trans     &trans     &trans        &trans    &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
&none  &bootloader   &none         &none         &none         &bt BT_CLR_ALL  &bt BT_CLR_ALL  &none         &none         &none         &bootloader   &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR      &bt BT_CLR      &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &none
&none  &sys_reset    &none         &none         &none         &none           &none           &none         &none         &none         &sys_reset    &none
                                   &trans        &none         &trans          &none           &trans        &trans
            >;
        };
    };
};
